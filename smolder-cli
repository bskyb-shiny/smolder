#!/usr/bin/env python
import os
import yaml
import sys
import smolder
from imp import reload

#from smolder import run_test, tcp_test, curl_request, http_test, failed_tests, passed_tests

FORMAT = '%(asctime)-15s %(name)s [%(levelname)s]: %(message)s'
import logging
import argh
from argh import arg, dispatch_command
logging.basicConfig(format=FORMAT, level=logging.ERROR, datefmt="%Y-%m-%d %H:%M:%S")
LOG = logging.getLogger('smolder')
LOG.setLevel(logging.INFO)
PARSER = argh.ArghParser()

@dispatch_command
@arg('host', help='IP address or DNS name to run tests against',
     default=os.environ.get('TEST_HOST'))
@arg('testfile', default=os.environ.get('TEST_FILE'),
     metavar='TEST_FILE',
     help='The json/yaml file that details the tests to execute')
@arg('--force',
     help='Use http methods that can potentially change data (PUT, POST, DELETE, etc. ie !GET)',
     default=False)
def smolder_cli(**kwargs):
  """ Parse CLI args and if valid dispatch to lower methods """
  # Load the test specification file, parse the json and create a 'tests' object
  try:
    myfile = open(kwargs['testfile'])
    test_json = yaml.load(myfile)
    tests = test_json['tests']
  except IOError:
    LOG.exception("Couldn't open test file %s", kwargs['testfile'])
    raise
  except yaml.parser.ParserError:
    LOG.exception("Invalid yaml in file %s", kwargs['testfile'])
    raise
  except ValueError:
    LOG.exception("Invalid data in file %s", kwargs['testfile'])
    raise
  except KeyError:
    LOG.exception("No tests defined in %s", kwargs['testfile'])
    raise
  if len(tests) == 0:
    LOG.error("There are no tests configured in %s: You MUST specify at least one test", kwargs['testfile'])
    sys.exit(2)

  LOG.debug("Beginning default TCP test")
  smolder.tcp_test(str(kwargs['host']), tests[0]['port'])
  LOG.debug("Passed default TCP test")
  LOG.info("Preparing to execute {0} tests".format(len(tests)))
  # Iterate through all the tests

  for test in test_json['tests']:
    smolder.run_test(test, str(kwargs['host']), kwargs['force'])

  reload(smolder)
  if smolder.failed_tests > 0:
    LOG.info("FOUND %s FAILURES IN %s TESTS", str(smolder.failed_tests), str(smolder.passed_tests + smolder.failed_tests))
    sys.exit(1)
  else:
    LOG.info("ALL TESTS PASSED!")
